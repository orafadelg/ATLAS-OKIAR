# -*- coding: utf-8 -*-
"""
Okiar Demo ‚Äì Estrutura + BRAIN + MERIDIO (Streamlit)
Primeiro c√≥digo: estrutura completa + abas BRAIN e MERIDIO prontas.

Como rodar:
    pip install streamlit plotly pandas numpy
    streamlit run app.py

Observa√ß√µes:
- Dados fict√≠cios, apenas para demonstra√ß√£o dos frameworks.
- Abas futuras (MMX, UXM, Domus, e‚ÄëBRAIN) j√° est√£o criadas como placeholders.
"""

import math
import random
from dataclasses import dataclass
from typing import Dict, List, Tuple
from datetime import date

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

# -----------------------------------------------------------------------------
# CONFIG B√ÅSICA
# -----------------------------------------------------------------------------
st.set_page_config(
    page_title="Okiar ‚Äì Demo de Produtos",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded",
)

PRIMARY = "#5D6CFB"
ACCENT = "#00C2A8"
WARNING = "#FFB020"
DANGER = "#EB5757"
MUTED = "#9AA0A6"
LIGHT_BG = "#F7F8FA"

CUSTOM_CSS = f"""
/* Cards e m√©tricas */
.metric-card {{
  background: white; border: 1px solid #EAECF0; border-radius: 16px;
  padding: 16px 18px; box-shadow: 0 1px 2px rgba(16,24,40,.05);
}}
.metric-label {{ color: {MUTED}; font-size: 12px; font-weight: 500; }}
.metric-value {{ font-size: 28px; font-weight: 700; }}
.metric-delta-up {{ color: {ACCENT}; font-weight: 600; }}
.metric-delta-down {{ color: {DANGER}; font-weight: 600; }}

.block-title {{ font-size: 16px; font-weight: 700; margin-bottom: 6px; }}
.subtle {{ color: {MUTED}; font-size: 12px; }}
.section {{ padding: 6px 0 2px 0; }}

.small-table table {{ font-size: 12px; }}

.badge {{ display:inline-block; padding:4px 8px; font-size:11px; border-radius:12px; background:{LIGHT_BG}; border:1px solid #E5E7EB; color:#374151 }}
.badge-green {{ background:#ECFDF5; color:#047857; border-color:#A7F3D0; }}
.badge-yellow {{ background:#FFFBEB; color:#92400E; border-color:#FDE68A; }}
.badge-red {{ background:#FEF2F2; color:#991B1B; border-color:#FCA5A5; }}

.alert {{ border-left: 4px solid {ACCENT}; background: white; padding: 10px 12px; border-radius: 8px; border:1px solid #EAECF0; }}
.alert-critico {{ border-left-color: {DANGER}; }}
.alert-alto {{ border-left-color: {WARNING}; }}

/* Expander */
details > summary {{ cursor: pointer; }}
"""

st.markdown(f"<style>{CUSTOM_CSS}</style>", unsafe_allow_html=True)

# -----------------------------------------------------------------------------
# RANDOM SEED
# -----------------------------------------------------------------------------
SEED = 7
random.seed(SEED)
np.random.seed(SEED)
TODAY = date.today()

# -----------------------------------------------------------------------------
# HELPERS VISUAIS
# -----------------------------------------------------------------------------

def metric_card(label: str, value: str, delta: float | None = None):
    delta_html = ""
    if delta is not None:
        cls = "metric-delta-up" if delta >= 0 else "metric-delta-down"
        arrow = "‚Üë" if delta >= 0 else "‚Üì"
        delta_html = f"<div class='{cls}'>{arrow} {delta:.1f}%</div>"
    st.markdown(
        f"""
        <div class='metric-card'>
            <div class='metric-label'>{label}</div>
            <div class='metric-value'>{value}</div>
            {delta_html}
        </div>
        """,
        unsafe_allow_html=True,
    )


def pct(x):
    return f"{x*100:.1f}%"


def line_pct(df: pd.DataFrame, x: str, y: str, color: str, title: str, height: int = 320):
    fig = px.line(df, x=x, y=y, color=color, markers=True)
    fig.update_layout(
        title=title, height=height,
        margin=dict(l=10, r=10, t=40, b=10),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )
    fig.update_yaxes(tickformat=",.0%")
    return fig


def bars_pct(df: pd.DataFrame, x: str, y: str, color: str, title: str, height: int = 320):
    fig = px.bar(df, x=x, y=y, color=color, barmode="group", text_auto=".0%")
    fig.update_layout(title=title, height=height, margin=dict(l=10, r=10, t=40, b=10))
    return fig


def bars_num(df: pd.DataFrame, x: str, y: str, color: str, title: str, height: int = 320):
    fig = px.bar(df, x=x, y=y, color=color, barmode="group", text_auto=True)
    fig.update_layout(title=title, height=height, margin=dict(l=10, r=10, t=40, b=10))
    return fig


def scatter_perf_import(df: pd.DataFrame, x: str, y: str, color: str, text: str, title: str, height: int = 420):
    fig = px.scatter(df, x=x, y=y, color=color, text=text, size_max=18)
    fig.update_traces(textposition="top center")
    fig.update_layout(title=title, height=height, margin=dict(l=10, r=10, t=40, b=10))
    return fig


def radar_compare(categories: List[str], a_vals: List[float], b_vals: List[float], a_name: str, b_name: str, title: str):
    # plotly polar
    df = pd.DataFrame({
        'categoria': categories * 2,
        'score': a_vals + b_vals,
        'marca': [a_name]*len(categories) + [b_name]*len(categories)
    })
    fig = px.line_polar(df, r='score', theta='categoria', color='marca', line_close=True)
    fig.update_layout(title=title, height=380, margin=dict(l=10, r=10, t=40, b=10))
    return fig


def alert_box(titulo: str, texto: str, nivel: str = "normal"):
    cls = "alert"
    if nivel == "critico":
        cls += " alert-critico"
    elif nivel == "alto":
        cls += " alert-alto"
    st.markdown(f"<div class='{cls}'><b>{titulo}</b><br/>{texto}</div>", unsafe_allow_html=True)

# -----------------------------------------------------------------------------
# DADOS MOCK (BRAIN e MERIDIO)
# -----------------------------------------------------------------------------

BRANDS = ["Banco √Åquila", "Banco Boreal", "Banco Cobalto", "Banco Delta", "Banco √âpsilon"]
A_BRAND = BRANDS[0]
B_BRAND = BRANDS[1]

MEDIA_HABITS = ["TV Aberta", "TV Paga", "YouTube", "TikTok", "Instagram", "Google", "Portais", "R√°dio", "Out of Home"]
FACTORS = {
    "Qualidade": ["Sabor", "Aroma", "Est√©tica", "Durabilidade", "Acabamento"],
    "Performance": ["Pre√ßo justo", "Distribui√ß√£o", "Disponibilidade", "Comunica√ß√£o", "Promo√ß√µes"],
    "Juventude": ["Moderna", "Alegre", "Ousada", "Divertida", "Inovadora"],
    "Seguran√ßa": ["Saud√°vel", "Credibilidade", "Confi√°vel", "Privacidade", "Sem falhas"],
    "Proximidade": ["Combina comigo", "Reflete meus valores", "Minha cara", "Faz sentido", "Tem a ver comigo"],
}

# 25 atributos (5 fatores x 5 atributos) ‚Äì performance e import√¢ncia simuladas
ATTR_ROWS = []
for f, attrs in FACTORS.items():
    for a in attrs:
        perf_a = float(np.clip(np.random.normal(0.62 if f in ["Qualidade", "Seguran√ßa"] else 0.55, 0.12), 0.2, 0.95))
        imp_a = float(np.clip(np.random.normal(0.60 if f in ["Seguran√ßa", "Proximidade"] else 0.50, 0.15), 0.1, 0.95))
        ATTR_ROWS.append({"fator": f, "atributo": a, "performance": perf_a, "importancia": imp_a})
DF_ATTR = pd.DataFrame(ATTR_ROWS)

# Habitos de m√≠dia (BRAIN / MERIDIO ‚Äì Comportamento)
DF_MEDIA = pd.DataFrame({
    "canal": MEDIA_HABITS,
    A_BRAND: np.clip(np.random.dirichlet(np.ones(len(MEDIA_HABITS))) * 1.7, 0.02, None),
    B_BRAND: np.clip(np.random.dirichlet(np.ones(len(MEDIA_HABITS))) * 1.7, 0.02, None),
})
DF_MEDIA["Geral"] = (DF_MEDIA[A_BRAND] + DF_MEDIA[B_BRAND]) / 2

# Funil (top-of-mind + 4 est√°gios ‚Äì 5 marcas)
FUNIL_STAGES = ["Top of mind", "Lembran√ßa", "Familiaridade", "Considera√ß√£o", "Prefer√™ncia"]
rows = []
for brand in BRANDS:
    base = np.clip(np.random.normal(0.20, 0.06), 0.05, 0.40)
    lemb = np.clip(base + np.random.normal(0.25, 0.05), 0.10, 0.85)
    fam = np.clip(lemb + np.random.normal(0.10, 0.04), 0.10, 0.95)
    cons = np.clip(fam - np.random.uniform(0.05, 0.20), 0.05, fam)
    pref = np.clip(cons - np.random.uniform(0.03, 0.12), 0.01, cons)
    vals = [base, lemb, fam, cons, pref]
    for s, v in zip(FUNIL_STAGES, vals):
        rows.append({"marca": brand, "etapa": s, "valor": float(v)})
DF_FUNIL = pd.DataFrame(rows)

# Imagem ‚Äì fatores (scores 0-1) com hover listando atributos
IMG_ROWS = []
for brand in [A_BRAND, B_BRAND]:
    for f, attrs in FACTORS.items():
        score = float(np.clip(np.random.normal(0.62 if brand==A_BRAND else 0.58, 0.08), 0.2, 0.95))
        IMG_ROWS.append({"marca": brand, "fator": f, "score": score, "hover": ", ".join(attrs)})
DF_IMG = pd.DataFrame(IMG_ROWS)

# Equity ‚Äì comparar A vs B
EQUITY_METRICS = [
    "Inten√ß√£o abrir conta", "Inten√ß√£o recomendar", "Satisfa√ß√£o",
    "Inten√ß√£o contratar cr√©dito", "Principalidade"
]
DF_EQ = pd.DataFrame({
    "kpi": EQUITY_METRICS,
    A_BRAND: np.clip(np.random.normal(0.62, 0.08, len(EQUITY_METRICS)), 0.2, 0.95),
    B_BRAND: np.clip(np.random.normal(0.57, 0.08, len(EQUITY_METRICS)), 0.2, 0.90),
})

# Estrat√©gia ‚Äì matriz perf x import√¢ncia (25 atributos do DF_ATTR)
# e ‚ÄúParticipa√ß√£o de Branding no resultado‚Äù (R¬≤ simulado por KPI)
BRANDING_IMPACT = pd.DataFrame({
    "kpi": ["Inten√ß√£o abrir conta", "Satisfa√ß√£o", "Inten√ß√£o recomendar", "Principalidade"],
    "participacao_branding": np.clip(np.random.normal(0.68, 0.08, 4), 0.35, 0.90)
})

# ------------------- MERIDIO -------------------
# Personas ‚Äì 3 faixas (A/B/C), 3 personas por faixa
PERSONA_GROUPS = {
    "A": ["Os Apressados", "Os Vision√°rios", "Os Refinados"],
    "B": ["Os Organizados", "Os Astutos", "Os Exploradores"],
    "C": ["Os Pr√°ticos", "Os Descolados", "Os Cautelosos"],
}
PERSONA_DESC = {
    "Os Apressados": "Valorizam rapidez e conveni√™ncia; baixa toler√¢ncia a fric√ß√£o.",
    "Os Vision√°rios": "Buscam inova√ß√£o e status; adotam novidades cedo.",
    "Os Refinados": "Preferem qualidade premium e atendimento diferenciado.",
    "Os Organizados": "Planejam finan√ßas; respondem bem a programas de fidelidade.",
    "Os Astutos": "Ca√ßadores de valor; sens√≠veis a pre√ßo e benef√≠cios.",
    "Os Exploradores": "Experimentam marcas; propensos a cross-sell.",
    "Os Pr√°ticos": "Objetivos e sens√≠veis a pre√ßo; pouca paci√™ncia para burocracia.",
    "Os Descolados": "Digitais, influenciados por social e creators.",
    "Os Cautelosos": "Aversos a risco; exigem provas sociais e garantias.",
}

# H√°bitos de m√≠dia / frequ√™ncia / ticket variando por persona
BASE_MEDIA = DF_MEDIA.set_index("canal")["Geral"].to_dict()

def persona_adjustment(name: str, base: Dict[str, float]) -> Dict[str, float]:
    # Aplica pequenos ajustes por persona
    adj = {k: v for k, v in base.items()}
    if "Descolados" in name or "Exploradores" in name:
        for k in ["TikTok", "Instagram", "YouTube"]:
            adj[k] = min(adj[k]*1.35, 0.5)
    if "Cautelosos" in name:
        for k in ["TV Aberta", "Portais", "Google"]:
            adj[k] = min(adj[k]*1.25, 0.6)
    if "Refinados" in name:
        for k in ["TV Paga", "Out of Home", "Instagram"]:
            adj[k] = min(adj[k]*1.20, 0.55)
    s = sum(adj.values())
    return {k: v/s for k, v in adj.items()}

PERSONA_MEDIA = {p: persona_adjustment(p, BASE_MEDIA) for grp in PERSONA_GROUPS.values() for p in grp}
PERSONA_FREQ = {p: float(np.clip(np.random.normal(2.6, 0.6), 0.5, 5.0)) for p in PERSONA_MEDIA.keys()}  # vezes/m√™s
PERSONA_TICKET = {p: float(np.clip(np.random.normal(180, 60), 40, 600)) for p in PERSONA_MEDIA.keys()}  # R$

# Drivers ‚Äì 16 atributos dermocosm√©ticos (perf x import√¢ncia)
DERMO_ATTRS = [
    "Embalagem", "Pre√ßo justo", "For√ßa de marca", "Qualidade", "Buzz",
    "Variedade", "Ingredientes naturais", "Dermatologicamente testado",
    "Textura", "Aroma", "Benef√≠cio anti-idade", "Hidrata√ß√£o",
    "Disponibilidade", "Sustentabilidade", "Indica√ß√£o de influenciadores", "Efic√°cia comprovada"
]
DRIVERS = pd.DataFrame({
    "atributo": DERMO_ATTRS,
    "performance": np.clip(np.random.normal(0.58, 0.12, len(DERMO_ATTRS)), 0.15, 0.95),
    "importancia": np.clip(np.random.normal(0.55, 0.15, len(DERMO_ATTRS)), 0.10, 0.95)
})

# Fatores agregados (4) para o simulador
AGG_FACTORS = {
    "Produto": ["Qualidade", "Textura", "Aroma", "Hidrata√ß√£o", "Efic√°cia comprovada"],
    "Marca": ["For√ßa de marca", "Buzz", "Indica√ß√£o de influenciadores", "Sustentabilidade", "Ingredientes naturais"],
    "Pre√ßo & Oferta": ["Pre√ßo justo", "Variedade", "Disponibilidade"],
    "Embalagem": ["Embalagem", "Dermatologicamente testado", "Benef√≠cio anti-idade"],
}

# Pesos fict√≠cios para inten√ß√£o de compra
AGG_WEIGHTS = {"Produto": 0.38, "Marca": 0.27, "Pre√ßo & Oferta": 0.22, "Embalagem": 0.13}
BASE_INTENCAO = 0.52

# Offers ‚Äì Van Westendorp (simulado)
prices = np.linspace(20, 200, 60)
# curvas cumulativas simuladas
ppc = np.clip(np.linspace(0.02, 0.85, 60) + np.random.normal(0, 0.02, 60), 0, 1)  # too cheap
pei = np.clip(np.linspace(0.01, 0.75, 60)[::-1] + np.random.normal(0, 0.02, 60), 0, 1)  # too expensive
pip = np.clip(np.linspace(0.10, 0.90, 60) + np.random.normal(0, 0.02, 60), 0, 1)  # cheap
pex = np.clip(np.linspace(0.05, 0.80, 60)[::-1] + np.random.normal(0, 0.02, 60), 0, 1)  # expensive
VW = pd.DataFrame({"preco": prices, "muito_barato": ppc, "caro": pei, "barato": pip, "muito_caro": pex})

# Experimento ‚Äì Embalagem A vs B (fatores de imagem)
PACK_FACTORS = ["Pre√ßo justo", "Qualidade", "For√ßa de marca", "Premiumidade", "Inten√ß√£o de compra", "Inten√ß√£o pagar mais"]
PACK = pd.DataFrame({
    "fator": PACK_FACTORS,
    "A": np.clip(np.random.normal(70, 10, len(PACK_FACTORS)), 30, 95),
    "B": np.clip(np.random.normal(75, 10, len(PACK_FACTORS)), 30, 98),
})

# -----------------------------------------------------------------------------
# SIDEBAR GLOBAL
# -----------------------------------------------------------------------------
with st.sidebar:
    st.title("Okiar ‚Äì Demo")
    st.caption("Frameworks de Consumer/Brand Insights, inspirados nos m√≥dulos BRAIN & MERIDIO.")
    st.divider()
    brand_a = st.selectbox("Marca A", options=BRANDS, index=0)
    brand_b = st.selectbox("Marca B", options=[b for b in BRANDS if b != brand_a], index=0)
    st.caption(":grey[Dados fict√≠cios]")

# Atualiza r√≥tulos A e B se usu√°rio trocar
A_BRAND = brand_a
B_BRAND = brand_b

# -----------------------------------------------------------------------------
# ABAS
# -----------------------------------------------------------------------------
TAB_BRAIN, TAB_MERIDIO, TAB_MMX, TAB_UXM, TAB_DOMUS, TAB_EBRAIN = st.tabs([
    "BRAIN", "MERIDIO", "MMX (placeholder)", "UXM (placeholder)", "Domus (placeholder)", "e‚ÄëBRAIN (placeholder)"
])

# =====================================
# BRAIN ‚Äì 5 m√≥dulos (cap√≠tulos)
# =====================================
with TAB_BRAIN:
    st.title("BRAIN ‚Äì Brand+Insights")
    st.caption("M√≥dulos: Comportamento ‚Ä¢ Mem√≥ria ‚Ä¢ Imagem ‚Ä¢ Equity ‚Ä¢ Estrat√©gia")
    st.divider()

    # ---------------- Comportamento ----------------
    st.subheader("Comportamento ‚Äì H√°bitos de m√≠dia (exemplo)")
    st.caption("Distribui√ß√£o de canais de m√≠dia entre marcas selecionadas.")
    media = DF_MEDIA.melt(id_vars=["canal"], value_vars=["Geral"], var_name="amostra", value_name="share")
    fig_m = px.bar(media, x="canal", y="share", text_auto=".0%", title="H√°bitos de m√≠dia ‚Äì Geral")
    fig_m.update_layout(height=360, margin=dict(l=10, r=10, t=50, b=10))
    fig_m.update_yaxes(tickformat=",.0%")
    st.plotly_chart(fig_m, use_container_width=True)

    st.divider()

    # ---------------- Mem√≥ria ----------------
    st.subheader("Mem√≥ria ‚Äì Top of mind & Funil de 5 marcas")
    st.caption("Top of mind, lembran√ßa, familiaridade, considera√ß√£o e prefer√™ncia.")
    funnel_cur = DF_FUNIL.copy()
    fig_f = bars_pct(funnel_cur, x="etapa", y="valor", color="marca", title="Funil de marcas ‚Äì Exemplo")
    st.plotly_chart(fig_f, use_container_width=True)

    st.divider()

    # ---------------- Imagem ----------------
    st.subheader("Imagem ‚Äì Fatores de percep√ß√£o (A vs B)")
    st.caption("Passe o mouse para ver os atributos dentro de cada fator.")
    img = DF_IMG[DF_IMG["marca"].isin([A_BRAND, B_BRAND])].copy()
    fig_img = px.bar(img, x="fator", y="score", color="marca", barmode="group", text_auto=".0%",
                     hover_data={"hover": True, "fator": False, "score": ":.0%", "marca": False})
    fig_img.update_traces(hovertemplate="<b>%{x}</b><br>Score: %{y:.0%}<br>Atributos: %{customdata[0]}")
    fig_img.update_layout(height=360, margin=dict(l=10, r=10, t=50, b=10))
    fig_img.update_yaxes(tickformat=",.0%")
    st.plotly_chart(fig_img, use_container_width=True)

    st.divider()

    # ---------------- Equity ----------------
    st.subheader("Equity ‚Äì KPIs (A vs B)")
    eq = DF_EQ.melt(id_vars=["kpi"], value_vars=[A_BRAND, B_BRAND], var_name="marca", value_name="score")
    fig_eq = bars_pct(eq, x="kpi", y="score", color="marca", title="KPIs de equity ‚Äì demonstra√ß√£o", height=340)
    st.plotly_chart(fig_eq, use_container_width=True)

    st.divider()

    # ---------------- Estrat√©gia ----------------
    st.subheader("Estrat√©gia ‚Äì Matriz de prioridades e participa√ß√£o do Branding")

    # Matriz perf x import√¢ncia
    df_pi = DF_ATTR.copy()
    df_pi["zona"] = np.where(
        (df_pi["performance"] < df_pi["performance"].median()) & (df_pi["importancia"] >= df_pi["importancia"].median()),
        "Urg√™ncia", np.where(
            (df_pi["performance"] >= df_pi["performance"].median()) & (df_pi["importancia"] >= df_pi["importancia"].median()),
            "Prote√ß√£o", "Acompanhamento"
        )
    )
    fig_mat = px.scatter(df_pi, x="performance", y="importancia", color="zona", text="atributo",
                         hover_data=["fator"], title="Matriz de Prioriza√ß√£o (Performance x Import√¢ncia)")
    fig_mat.update_traces(textposition="top center")
    fig_mat.update_layout(height=420, margin=dict(l=10, r=10, t=50, b=10))
    fig_mat.update_xaxes(tickformat=",.0%")
    fig_mat.update_yaxes(tickformat=",.0%")
    st.plotly_chart(fig_mat, use_container_width=True)

    # Participa√ß√£o de Branding (R¬≤)
    st.markdown("<div class='block-title'>Participa√ß√£o de Branding no resultado</div>", unsafe_allow_html=True)
    fig_r2 = px.bar(BRANDING_IMPACT, x="kpi", y="participacao_branding", text_auto=".0%", title="")
    fig_r2.update_layout(height=320, margin=dict(l=10, r=10, t=20, b=10))
    fig_r2.update_yaxes(tickformat=",.0%")
    st.plotly_chart(fig_r2, use_container_width=True)

# =====================================
# MERIDIO ‚Äì Core + Personas + Drivers + Jornada
# =====================================
with TAB_MERIDIO:
    st.title("MERIDIO ‚Äì Consumer Behavior")
    st.caption("M√≥dulos: Comportamento ‚Ä¢ Personas ‚Ä¢ Drivers ‚Ä¢ Jornada")
    st.divider()

    # ---------------- Comportamento (igual BRAIN) ----------------
    st.subheader("Comportamento ‚Äì H√°bitos de m√≠dia (exemplo)")
    media = DF_MEDIA.melt(id_vars=["canal"], value_vars=["Geral"], var_name="amostra", value_name="share")
    fig_m2 = px.bar(media, x="canal", y="share", text_auto=".0%", title="H√°bitos de m√≠dia ‚Äì Geral")
    fig_m2.update_layout(height=320, margin=dict(l=10, r=10, t=50, b=10))
    fig_m2.update_yaxes(tickformat=",.0%")
    st.plotly_chart(fig_m2, use_container_width=True)

    st.divider()

    # ---------------- Personas ----------------
    st.subheader("Personas ‚Äì por faixa de renda")
    colA, colB = st.columns((1,1))
    with colA:
        faixa = st.radio("Selecione uma faixa", options=["Todas", "A", "B", "C"], horizontal=True)
    with colB:
        st.caption(":grey[Clique em uma persona para atualizar os gr√°ficos]")

    if faixa == "Todas":
        personas = sum(PERSONA_GROUPS.values(), [])
    else:
        personas = PERSONA_GROUPS[faixa]

    pcols = st.columns(3)
    clicked = st.session_state.get("persona_clicked", "")
    for i, p in enumerate(personas):
        if pcols[i % 3].button(p, use_container_width=True):
            st.session_state["persona_clicked"] = p
            clicked = p

    st.caption(PERSONA_DESC.get(clicked, "Sem persona selecionada ‚Äì exibindo m√©dia geral."))

    # Gr√°ficos dependentes da persona
    if clicked:
        med = pd.Series(PERSONA_MEDIA[clicked]).reset_index()
        med.columns = ["canal", "share"]
        freq = PERSONA_FREQ[clicked]
        ticket = PERSONA_TICKET[clicked]
    else:
        med = DF_MEDIA[["canal", "Geral"]].rename(columns={"Geral": "share"})
        freq = float(np.mean(list(PERSONA_FREQ.values())))
        ticket = float(np.mean(list(PERSONA_TICKET.values())))

    c1, c2 = st.columns((2,1))
    with c1:
        fig_p1 = px.bar(med, x="canal", y="share", text_auto=".0%", title="H√°bitos de m√≠dia")
        fig_p1.update_layout(height=320, margin=dict(l=10, r=10, t=50, b=10))
        fig_p1.update_yaxes(tickformat=",.0%")
        st.plotly_chart(fig_p1, use_container_width=True)
    with c2:
        st.markdown("<div class='block-title'>Frequ√™ncia de compra (m√©dia/m√™s)</div>", unsafe_allow_html=True)
        metric_card("Frequ√™ncia", f"{freq:.1f}x/m√™s")
        st.markdown("<div class='block-title'>Ticket m√©dio</div>", unsafe_allow_html=True)
        metric_card("Ticket", f"R$ {ticket:,.0f}")

    st.divider()

    # ---------------- Drivers ----------------
    st.subheader("Drivers ‚Äì Compra ‚Ä¢ Offers ‚Ä¢ Experimento")
    dtab1, dtab2, dtab3 = st.tabs(["Drivers de Compra", "Offers", "Experimento"])

    with dtab1:
        st.markdown("<div class='block-title'>Matriz de drivers (dermocosm√©ticos)</div>", unsafe_allow_html=True)
        fig_d1 = px.scatter(DRIVERS, x="performance", y="importancia", text="atributo", color="importancia",
                            color_continuous_scale="Tealgrn")
        fig_d1.update_traces(textposition="top center")
        fig_d1.update_layout(height=420, margin=dict(l=10, r=10, t=50, b=10), coloraxis_colorbar_title="Import√¢ncia")
        fig_d1.update_xaxes(tickformat=",.0%")
        fig_d1.update_yaxes(tickformat=",.0%")
        st.plotly_chart(fig_d1, use_container_width=True)

        st.markdown("<div class='block-title'>Simulador de inten√ß√£o de compra (4 fatores agregados)</div>", unsafe_allow_html=True)
        sc1, sc2 = st.columns((2,1))
        with sc1:
            sliders = {}
            hover_text = {
                k: ", ".join(v) for k, v in AGG_FACTORS.items()
            }
            for k in AGG_FACTORS.keys():
                sliders[k] = st.slider(f"{k}", min_value=-20, max_value=20, value=0, step=1, help=f"Inclui: {hover_text[k]}")
        with sc2:
            # C√°lculo simples: inten√ß√£o = base + soma(delta% * peso)
            delta_perc = {k: sliders[k]/100 for k in sliders}
            inten = BASE_INTENCAO * (1 + sum(delta_perc[k]*AGG_WEIGHTS[k] for k in AGG_WEIGHTS))
            inten = float(np.clip(inten, 0.01, 0.99))
            # Tabela de impactos
            imp_rows = [{"Fator": k, "% Œî atributo": f"{delta_perc[k]*100:+.0f}%", "% Œî inten√ß√£o": f"{delta_perc[k]*AGG_WEIGHTS[k]*100:+.1f}%"} for k in sliders]
            df_imp = pd.DataFrame(imp_rows)
            st.dataframe(df_imp, use_container_width=True, height=180)
            st.markdown("<div class='block-title'>Inten√ß√£o de compra estimada</div>", unsafe_allow_html=True)
            metric_card("Inten√ß√£o", pct(inten))

    with dtab2:
        st.markdown("<div class='block-title'>Escolha uma op√ß√£o</div>", unsafe_allow_html=True)
        cco, cpr = st.columns((1,1))
        with cco:
            st.markdown("**Conjoint**")
            st.link_button("Abrir simulador de Conjoint", "https://simuladorconjointtdah-g3tyutubdwrqowizlogkuc.streamlit.app")
        with cpr:
            st.markdown("**Price ‚Äì Van Westendorp**")
            fig_vw = go.Figure()
            fig_vw.add_trace(go.Scatter(x=VW["preco"], y=VW["muito_barato"], name="Muito barato"))
            fig_vw.add_trace(go.Scatter(x=VW["preco"], y=VW["barato"], name="Barato"))
            fig_vw.add_trace(go.Scatter(x=VW["preco"], y=VW["caro"], name="Caro"))
            fig_vw.add_trace(go.Scatter(x=VW["preco"], y=VW["muito_caro"], name="Muito caro"))
            fig_vw.update_layout(title="Curvas de sensibilidade de pre√ßo (VW)", xaxis_title="Pre√ßo", yaxis_title="% acumulado",
                                 height=360, margin=dict(l=10, r=10, t=50, b=10))
            st.plotly_chart(fig_vw, use_container_width=True)
            st.caption("Faixa ideal de pre√ßo: regi√£o entre as interse√ß√µes Barato√óCaro e Muito barato√óMuito caro (estimada no gr√°fico).")

    with dtab3:
        st.markdown("<div class='block-title'>Teste A/B ‚Äì Embalagens</div>", unsafe_allow_html=True)
        pack_m = PACK.melt(id_vars=["fator"], value_vars=["A", "B"], var_name="embalagem", value_name="score")
        fig_pack = px.bar(pack_m, x="fator", y="score", color="embalagem", barmode="group", text_auto=True,
                          title="Desempenho por fator (A vs B)")
        fig_pack.update_layout(height=360, margin=dict(l=10, r=10, t=50, b=10))
        st.plotly_chart(fig_pack, use_container_width=True)

    st.divider()

    # ---------------- Jornada ----------------
    st.subheader("Jornada ‚Äì Exemplo (macro‚Äëetapas)")
    steps = ["Descoberta", "Pesquisa", "Avalia√ß√£o", "Compra", "P√≥s‚Äëcompra"]
    sat = np.clip(np.random.normal(7, 1.2, len(steps)), 4, 10)  # CSAT 0‚Äì10
    drop = np.clip(np.random.normal(0.12, 0.05, len(steps)), 0.02, 0.35)
    df_j = pd.DataFrame({"etapa": steps, "CSAT": sat, "Drop-off": drop})
    jj1, jj2 = st.columns((1,1))
    with jj1:
        fig_j1 = px.bar(df_j, x="etapa", y="CSAT", text_auto=True, title="Satisfa√ß√£o por etapa")
        fig_j1.update_layout(height=320, margin=dict(l=10, r=10, t=50, b=10))
        st.plotly_chart(fig_j1, use_container_width=True)
    with jj2:
        fig_j2 = px.line(df_j, x="etapa", y="Drop-off", markers=True, title="Queda por etapa")
        fig_j2.update_layout(height=320, margin=dict(l=10, r=10, t=50, b=10))
        fig_j2.update_yaxes(tickformat=",.0%")
        st.plotly_chart(fig_j2, use_container_width=True)

# =====================================
# Placeholders das demais abas (ser√£o preenchidas no 2¬∫ e 3¬∫ c√≥digos)
# =====================================
with TAB_MMX:
    st.info("MMX ser√° implementado no segundo c√≥digo (overview, evolu√ß√£o, prioriza√ß√£o, mini simulador).")
with TAB_UXM:
    st.info("UXM ser√° implementado no segundo c√≥digo (Big Five de UX, simulador de 3 colunas).")
with TAB_DOMUS:
    st.info("Domus ser√° implementado no terceiro c√≥digo (pilares de imagem + simulador voltado a colaboradores).")
with TAB_EBRAIN:
    st.info("e‚ÄëBRAIN ser√° implementado no terceiro c√≥digo (estrutura similar ao BRAIN para experi√™ncia dos colaboradores).")

st.divider()
st.write(":grey[Demo Okiar ‚Ä¢ Dados 100% fict√≠cios ‚Ä¢ v0.1 ‚Äì Estrutura + BRAIN + MERIDIO]")

